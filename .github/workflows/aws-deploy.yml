name: Deploy to AWS App Runner

on:
  push:
    branches: [master] # Change to your main branch name if different (e.g., master)

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: lookcard-reseller-portal
  APP_RUNNER_SERVICE: lookcard-reseller-portal

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build --platform linux/x86_64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Check if App Runner service exists
        id: check-service
        run: |
          if aws apprunner list-services | grep -q "${{ env.APP_RUNNER_SERVICE }}"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create App Runner service if it doesn't exist
        if: steps.check-service.outputs.exists == 'false'
        run: |
          aws apprunner create-service --service-name ${{ env.APP_RUNNER_SERVICE }} \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "${{ steps.build-image.outputs.image }}",
                "ImageConfiguration": {
                  "Port": "3000",
                  "RuntimeEnvironmentVariables": {
                    "NODE_ENV": "production"
                  }
                },
                "ImageRepositoryType": "ECR"
              },
              "AutoDeploymentsEnabled": true,
              "AuthenticationConfiguration": {
                "AccessRoleArn": "${{ secrets.AWS_APPRUNNER_ECR_ACCESS_ROLE_ARN }}"
              }
            }' \
            --instance-configuration '{
              "Cpu": "1 vCPU",
              "Memory": "2 GB"
            }'

      - name: Update App Runner service if it exists
        if: steps.check-service.outputs.exists == 'true'
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${{ env.APP_RUNNER_SERVICE }}'].ServiceArn" --output text)
          aws apprunner update-service --service-arn $SERVICE_ARN \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "${{ steps.build-image.outputs.image }}",
                "ImageConfiguration": {
                  "Port": "3000",
                  "RuntimeEnvironmentVariables": {
                    "NODE_ENV": "production"
                  }
                },
                "ImageRepositoryType": "ECR"
              },
              "AutoDeploymentsEnabled": true,
              "AuthenticationConfiguration": {
                "AccessRoleArn": "${{ secrets.AWS_APPRUNNER_ECR_ACCESS_ROLE_ARN }}"
              }
            }'
